<?php include('db_connection.php'); ?>
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Connor Young</title>
    <link href="../resources/css/default_v3.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<?php include 'header.php'; ?>
<body>

<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Check if 'game_id' is passed in URL
if (isset($_GET['draft_id'])) {
    $draft_id = $_GET['draft_id'];

    
    $sql = "SELECT * from draft_history WHERE draftID = '$draft_id'";

    $result = mysqli_query($conn, $sql);

    // Store all rows in a PHP array
    $all_picks = [];
    while ($row = mysqli_fetch_assoc($result)) {
        $all_picks[] = [
            'draftYear' => $row['draftYear'],
            'round' => $row['round'],
            'pickInRound' => $row['pickInRound'],
            'overallPick' => $row['overallPick'],
            'teamID' => $row['teamID'],
            'pickHistory' => $row['teamPickHistory'],
            'firstName' => $row['firstName'],
            'lastName' => $row['lastName'],
            'position' => $row['position'],
            'country' => $row['country'],
            'height' => $row['height'],
            'weight' => $row['weight'],
            'amateurLeague' => $row['amateurLeague'],
            'amateurClubName' => $row['amateurClubName']
        ];
    }

    // Pass data to JavaScript as JSON
    echo "<script>const allPicks = " . json_encode($all_picks) . ";</script>";

} else {
    echo "<p>No game ID provided.</p>";
}
?>
    <br><br>
<div class='max-w-[80%] mx-auto'>

    <!-- Search Filter Fields -->
    <div class="flex justify-between items-center mb-4">
        <input type="text" id="searchByPlayer" class="filter-input border rounded px-3 py-2 text-black" style='border: 2px solid #1F2833' placeholder="Search by Player">
        <h2 class="text-4xl font-bold text-white">Draft Picks</h2>
        <input type="text" id="searchByTeam" class="filter-input border rounded px-3 py-2 text-black" style='border: 2px solid #1F2833' placeholder="Search by Team">
    </div>

    <!-- Table -->
    <table class='shift-table default-zebra-table' id="draftTable">
        <thead>
            <tr>
                <th>Draft Year</th>
                <th>Round</th>
                <th>Pick in Round</th>
                <th>Overall Pick</th>
                <th>Team</th>
                <th>Pick History</th>
                <th>Name</th>
                <th>Position</th>
                <th>Country</th>
                <th>Height (in.)</th>
                <th>Weight (lbs)</th>
                <th>Amateur League</th>
                <th>Amateur Club Name</th>
            </tr>
        </thead>
        <tbody>
            <!-- Rows will be dynamically generated by JavaScript -->
             
        </tbody>
    </table>

    <!-- Pagination Controls -->
    <div id="pagination" class="flex justify-center space-x-4 mt-6 text-white">
        <!-- Pagination buttons will be dynamically generated -->
    </div>
    <br>
</div>

<script>
    // JavaScript to dynamically filter and paginate table rows
    document.addEventListener("DOMContentLoaded", function () {
        const tableBody = document.querySelector("#draftTable tbody");
        const searchByPlayer = document.getElementById("searchByPlayer");
        const searchByTeam = document.getElementById("searchByTeam");
        const pagination = document.getElementById("pagination");

        let currentPage = 1;
        const pageSize = 50; // Number of rows per page

        // Function to render rows dynamically
        function renderTable(data) {
            tableBody.innerHTML = ""; // Clear the table first
            const start = (currentPage - 1) * pageSize;
            const end = start + pageSize;
            const paginatedData = data.slice(start, end);

            paginatedData.forEach(row => {
                const tr = document.createElement("tr");
                tr.innerHTML = `
                    <td>${row.draftYear}</td>
                    <td>${row.round}</td>
                    <td>${row.pickInRound}</td>
                    <td>${row.overallPick}</td>
                    <td>${row.teamID}</td>
                    <td>${row.pickHistory}</td>
                    <td><a href="player_details.php?team_id=${row.playerID}">${row.firstName}</a></td>
                    <td>${row.position}</td>
                    <td>${row.country}</td>
                    <td>${row.height}</td>
                    <td>${row.weight}</td>
                    <td>${row.amateurLeague}</td>
                    <td>${row.amateurClubName}</td>
                `;
                tableBody.appendChild(tr);
            });
        }

        // Function to render pagination controls
        function renderPagination(data) {
            pagination.innerHTML = ""; // Clear existing pagination controls
            const totalPages = Math.ceil(data.length / pageSize);

            // Previous button
            if (currentPage > 1) {
                const prevButton = document.createElement("button");
                prevButton.textContent = "Previous";
                prevButton.className = "btn btn-secondary";
                prevButton.addEventListener("click", () => {
                    currentPage--;
                    updateTableAndPagination(data);
                });
                pagination.appendChild(prevButton);
            }

            // Page numbers
            for (let i = 1; i <= totalPages; i++) {
                const pageButton = document.createElement("button");
                pageButton.textContent = i;
                pageButton.className = `btn ${i === currentPage ? "btn-primary" : "btn-secondary"}`;
                pageButton.addEventListener("click", () => {
                    currentPage = i;
                    updateTableAndPagination(data);
                });
                pagination.appendChild(pageButton);
            }

            // Next button
            if (currentPage < totalPages) {
                const nextButton = document.createElement("button");
                nextButton.textContent = "Next";
                nextButton.className = "btn btn-secondary";
                nextButton.addEventListener("click", () => {
                    currentPage++;
                    updateTableAndPagination(data);
                });
                pagination.appendChild(nextButton);
            }
        }

        // Function to filter rows based on input
        function filterTable() {
            const playerFilter = searchByPlayer.value.toLowerCase();
            const teamFilter = searchByTeam.value.toLowerCase();

            return allPicks.filter(row => {
                const matchesPlayer = row.playerName.toLowerCase().includes(playerFilter);
                const matchesTeam = row.teamTricode.toLowerCase().includes(teamFilter);
                return matchesPlayer && matchesTeam;
            });
        }

        // Function to update table and pagination
        function updateTableAndPagination(data) {
            renderTable(data);
            renderPagination(data);
        }

        // Attach event listeners for filtering
        searchByPlayer.addEventListener("keyup", () => {
            currentPage = 1; // Reset to first page on filter change
            const filteredData = filterTable();
            updateTableAndPagination(filteredData);
        });

        searchByTeam.addEventListener("keyup", () => {
            currentPage = 1; // Reset to first page on filter change
            const filteredData = filterTable();
            updateTableAndPagination(filteredData);
        });

        // Initially render all rows and pagination
        updateTableAndPagination(allPicks);
    });

</script>

</body>
</html>